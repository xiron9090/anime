{"version":3,"sources":["app/graphql/index.ts","app/services/animeService/queries.ts","app/services/animeService/index.ts","app/containers/HomePage/homePageSlice.ts","app/hooks.ts","app/containers/HomePage/selectors.ts","app/containers/HomePage/hotAnime.tsx","app/containers/HomePage/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["apolloClient","ApolloClient","uri","cache","InMemoryCache","GET_ANIME_PAGE","gql","page","a","perPage","query","variables","response","data","Error","Page","HomePageSlice","createSlice","name","initialState","animePage","reducers","setAnimePage","state","action","payload","actions","useAppSelector","useSelector","makeSelecAnimePage","createSelector","homePage","HotAnimeContainer","styled","div","AnimeItemContainer","AnimeCover","AnimeTitle","h6","stateSelector","HotAnime","media","length","map","anime","src","coverImage","extraLarge","title","english","id","Container","HomePage","props","dispatch","useDispatch","fetchAnimePage","animeService","getAnimePage","catch","err","console","log","useEffect","AppContainer","App","store","configureStore","middleware","getDefaultMiddleware","concat","ReduxLogger","reducer","homePageReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","ApolloProvider","client","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","message"],"mappings":"wTAGaA,EAAe,IAAIC,IAAa,CAC3CC,IAAI,8BACJC,MAAM,IAAIC,M,QCHCC,EAAiBC,YAAH,+RCiBZ,M,mIAdf,WAAmBC,GAAnB,6BAAAC,EAAA,6DAA+BC,EAA/B,+BAAuC,EAAvC,kBAG2BT,EAAaU,MAAM,CAACA,MAAML,EAAeM,UAAU,CAACJ,OAAKE,aAHpF,WAGQG,EAHR,SAImBA,EAASC,KAJ5B,sBAKU,IAAIC,MAAM,0BALpB,gCAMSF,EAASC,KAAKE,MANvB,uG,uECCMC,EAAgBC,YAAY,CAChCC,KAAM,WACNC,aALmC,CACnCC,UAAW,MAKXC,SAAU,CACRC,aADQ,SACKC,EAAOC,GAClBD,EAAMH,UAAYI,EAAOC,YAIjBH,EAAgBN,EAAcU,QAA9BJ,aACCN,IAAf,Q,QCXaW,EAAkDC,I,QCAlDC,EAAqBC,aAFT,SAACP,GAAD,OAAuBA,EAAMQ,YAIpD,SAACA,GAAD,OAAcA,EAASX,a,OCFnBY,EAAoBC,IAAOC,IAAV,yJAQjBC,EAAqBF,IAAOC,IAAV,gIAOlBE,EAAaH,IAAOC,IAAV,gHAQVG,EAAaJ,IAAOK,GAAV,yGAMVC,EAAgBT,YAAeD,GAAoB,SAACT,GAAD,MAAgB,CACvEA,gBAEK,SAASoB,IAAY,IAClBpB,EAAcO,EAAeY,GAA7BnB,UAGN,OADCA,IAAcA,EAAUqB,OAAoC,IAA3BrB,EAAUqB,MAAMC,OACrB,6CAE7B,cAACV,EAAD,UACGZ,GACCA,EAAUqB,OACVrB,EAAUqB,MAAME,KAAI,SAACC,GAAD,eAClB,eAACT,EAAD,WACE,cAACC,EAAD,UACE,qBAAKS,KAAU,OAALD,QAAK,IAALA,GAAA,UAAAA,EAAOE,kBAAP,eAAmBC,aAAc,OAE7C,cAACV,EAAD,iBAAaO,QAAb,IAAaA,GAAb,UAAaA,EAAOI,aAApB,aAAa,EAAcC,YAJ7B,OAAyBL,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAOM,SCtC1C,I,EAAMC,EAAYlB,IAAOC,IAAV,kIAUR,SAASkB,EAASC,GAAwB,IAHzBC,EAIdhC,GAJcgC,EHZYC,cGYY,CAC9CjC,aAAc,SAACf,GAAD,OAAgC+C,EAAShC,EAAaf,OAG5De,aACFkC,EAAc,uCAAG,4BAAAhD,EAAA,sEACGiD,EAAaC,aAAa,EAAE,KAAKC,OAAM,SAACC,GAC9DC,QAAQC,IAAI,QAASF,MAFF,OACfxC,EADe,OAIrByC,QAAQC,IAAI,aAAc1C,GACtBA,GAAWE,EAAaF,GALP,2CAAH,qDAUpB,OAHA2C,qBAAU,WACRP,MACC,IAED,eAACL,EAAD,WACE,2CACA,cAACX,EAAD,OC/BN,IAAMwB,EAAe/B,IAAOC,IAAV,kHAgBH+B,MARf,WACE,OACE,cAACD,EAAD,UACA,cAACZ,EAAD,O,iBCJSc,EAAQC,YAAe,CAClCC,WAHiB,SAACC,GAAD,OACjBA,IAAuBC,OAAOC,MAG9BC,QAAS,CACPzC,SAAU0C,KCDMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCRNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUf,MAAOA,EAAjB,SACE,cAACgB,EAAA,EAAD,CAAgBC,OAAQnF,EAAxB,SACE,cAAC,EAAD,UAINoF,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdhC,OAAM,SAACiC,GACN/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.0305ecea.chunk.js","sourcesContent":["\nimport {ApolloClient, InMemoryCache} from \"@apollo/client\";\n\nexport const apolloClient = new ApolloClient({\n  uri:\"https://graphql.anilist.co/\",\n  cache:new InMemoryCache()\n})\n","import {gql} from \"@apollo/client\";\n\nexport const GET_ANIME_PAGE = gql`\n  query GetAnimePage($page: Int!,$perPage:Int!){\n    Page(page:$page,perPage:$perPage){\n      media {\n        id\n        description\n        title{\n          english\n        }\n        coverImage{\n          extraLarge\n        }\n      }\n    }\n  }\n`;\n","import {apolloClient} from \"../../graphql\";\nimport {GET_ANIME_PAGE} from \"./queries\";\nimport {GetAnimePage} from \"./__generated__/GetAnimePage\";\n\nclass AnimeService {\nasync getAnimePage(page:Number,perPage=5):Promise<GetAnimePage[\"Page\"]>{\n\n  try {\n  const response  =  await apolloClient.query({query:GET_ANIME_PAGE,variables:{page,perPage}}) \n  if(!response || !response.data)\n    throw new Error(\"Cannot get anime list!\");\n  return response.data.Page\n\n  } catch (err) {\n    throw err\n    \n  }\n}\n}\nexport default new AnimeService();\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { GetAnimePage } from \"../../services/animeService/__generated__/GetAnimePage\";\nimport { IHomePageState } from \"./types\";\nconst initialState: IHomePageState = {\n  animePage: null,\n};\nconst HomePageSlice = createSlice({\n  name: \"homePage\",\n  initialState,\n  reducers: {\n    setAnimePage(state, action) {\n      state.animePage = action.payload;\n    },\n  },\n});\nexport const {setAnimePage} = HomePageSlice.actions;\nexport default HomePageSlice.reducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSelector } from \"reselect\";\nimport {IRootState} from \"../../types\";\n\nconst selectorHomePage = (state: IRootState) => state.homePage;\n\nexport const makeSelecAnimePage = createSelector(\n  selectorHomePage,\n  (homePage) => homePage.animePage\n);\n","import { createSelector } from \"reselect\";\nimport styled from \"styled-components\";\nimport { useAppSelector } from \"../../hooks\";\nimport { makeSelecAnimePage } from \"./selectors\";\n\nconst HotAnimeContainer = styled.div`\n  max-width: 1280px;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justiy-conten: spaace-evenly;\n  flex-wrap:wrap;\n`;\nconst AnimeItemContainer = styled.div`\n  width: 17em;\n  height: 18em;\n  display: flex;\n  flex-direction: column;\n  align-items:center\n`;\nconst AnimeCover = styled.div`\n  width: auto;\n  height: 10em;\n  img {\n    width: auto;\n    height: 100%;\n  }\n`;\nconst AnimeTitle = styled.h6`\n  font-size: 15px;\n  color: #000;\n  margin-top: 8px;\n  font-weight: 500;\n`;\nconst stateSelector = createSelector(makeSelecAnimePage, (animePage) => ({\n  animePage,\n}));\nexport function HotAnime() {\n  const { animePage } = useAppSelector(stateSelector);\n  const isEmptyAnimedPage =\n    !animePage || !animePage.media || animePage.media.length === 0;\n    if(isEmptyAnimedPage) return <div>Loading...</div>\n  return (\n    <HotAnimeContainer>\n      {animePage &&\n        animePage.media &&\n        animePage.media.map((anime) => (\n          <AnimeItemContainer key={anime?.id}>\n            <AnimeCover>\n              <img src={anime?.coverImage?.extraLarge || \"\"} />\n            </AnimeCover>\n            <AnimeTitle>{anime?.title?.english}</AnimeTitle>\n          </AnimeItemContainer>\n        ))}\n    </HotAnimeContainer>\n  );\n}\n","import { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport animeService from \"../../services/animeService\";\nimport { Dispatch } from \"@reduxjs/toolkit\";\nimport { GetAnimePage } from \"../../services/animeService/__generated__/GetAnimePage\";\nimport { setAnimePage } from \"./homePageSlice\";\nimport { useAppDispatch } from \"../../hooks\";\nimport {HotAnime} from \"./hotAnime\";\ninterface IHomePageProps {}\nconst Container = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nconst actionDispatch = (dispatch: Dispatch) => ({\n  setAnimePage: (page: GetAnimePage[\"Page\"]) => dispatch(setAnimePage(page)),\n});\nexport function HomePage(props: IHomePageProps) {\n  const { setAnimePage } = actionDispatch(useAppDispatch());\n  const fetchAnimePage = async () => {\n    const animePage = await animeService.getAnimePage(0,200).catch((err) => {\n      console.log(\"Error\", err);\n    });\n    console.log(\"Anime page\", animePage);\n    if (animePage) setAnimePage(animePage);\n  };\n  useEffect(() => {\n    fetchAnimePage();\n  }, []);\n  return (\n    <Container>\n      <h1>Hot Anime</h1>\n      <HotAnime/>\n    </Container>\n  );\n}\n","import styled from 'styled-components';\nimport './App.css';\nimport {HomePage} from './app/containers/HomePage';\nconst AppContainer = styled.div`\nwith:100%;\nheight:100%;\ndisplay:flex;\nflex-direction:column;\nalign-items:center;\n`;\n\nfunction App() {\n  return (\n    <AppContainer>\n    <HomePage/>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import {\n  configureStore,\n  ThunkAction,\n  Action,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport homePageReducer from \"./containers/HomePage/homePageSlice\";\nimport ReduxLogger from \"redux-logger\";\nconst middleware = (getDefaultMiddleware: any) =>\n  getDefaultMiddleware().concat(ReduxLogger);\nexport const store = configureStore({\n  middleware,\n  reducer: {\n    homePage: homePageReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { apolloClient } from \"./app/graphql\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ApolloProvider client={apolloClient}>\n        <App />\n      </ApolloProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}